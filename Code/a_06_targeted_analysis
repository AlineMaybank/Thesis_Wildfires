#a_06_targeted_analysis

#Cluster Analysis of the targeted PAHs
#Code from Eric

#read in the required packages
library(gtools)
library(PReMiuM)
library(dplyr)
library(gtsummary)
library(corrplot) 
library(ggplot2)
library(tidyr)

#Read in the datset
df <- read.csv("BCWildfire_Cleaned_Data_AnalysisReady.csv")
getwd()
#[1] "/Users/alinemaybank/Desktop/thesis/Analysis"

#Exclude the controls from the analysis
df <- df %>%
  filter(Compounds!="KAM2" &
           Compounds!="KEL2" &
           Compounds!="KAM14")

df$SampleID<- factor(df$Compounds,
                     levels=c("KEL1",
                              # "KEL2", blank sample
                              # "KEL3", sample non-existant
                              "KEL4",
                              "KEL5",
                              "KEL6",
                              "KEL7",
                              "KEL8",
                              "KEL9",
                              "KEL10",
                              "KEL11",
                              "KEL12",
                              "KEL13",
                              "KAM1",
                              # "KAM2", blank sample
                              "KAM3",
                              "KAM4",
                              "KAM5",
                              "KAM6",
                              "KAM7",
                              "KAM8",
                              "KAM9",
                              "KAM10",
                              "KAM11",
                              "KAM12",
                              "KAM13"
                              # "KAM14" blank sample
                     ))
#My total merged datasets with hourly PM2.5 and Sampler_ID and WFS
#kam_df <- readRDS("cleaned_kamloops_hourly.rds")
#kel_df <- readRDS("cleaned_kelowna_hourly.rds")

#Eric used this PM2.5 dataset
getwd()
df.pm<- read.csv("pm25_data.csv")
df <- left_join(df,df.pm,by="SampleID")

#Reclassify concentrations into tertiles for all chemicals
#However, the cluster analysis focuses on the six PAHs
df$Di.n.butyl.phthalate_cat<- quantcut(df$Di.n.butyl.phthalate,q=3)
df$Dimethyl.phthalate_cat<- quantcut(df$Dimethyl.phthalate,q=3)
df$X1.3.4.6.7.8.Hexahydro.4.6.6.7.8.8.hexamethylcyclopenta.g..2.benzopyran_cat<- quantcut(df$X1.3.4.6.7.8.Hexahydro.4.6.6.7.8.8.hexamethylcyclopenta.g..2.benzopyran,q=3)
df$Homosalate_cat<- quantcut(df$Homosalate,q=3)
df$Tris.1.Chloro.2.propyl..phosphate_cat<- quantcut(df$Tris.1.Chloro.2.propyl..phosphate,q=3)
df$Diethyl.phthalate_cat<- quantcut(df$Diethyl.phthalate,q=3)
df$X4.Nitroaniline_cat<- quantcut(df$X4.Nitroaniline,q=3)
df$Benzothiazole_cat<- quantcut(df$Benzothiazole,q=3)
df$Di.n.octyl.phthalate_cat<- quantcut(df$Di.n.octyl.phthalate,q=3)
df$Isophorone_cat<- quantcut(df$Isophorone,q=3)
df$Phenanthrene_cat<- quantcut(df$Phenanthrene,q=3)
df$Benzophenone_cat<- quantcut(df$Benzophenone,q=3)
df$Anthracene_cat<- quantcut(df$Anthracene,q=3)
df$Nicotine_cat<- quantcut(df$Nicotine,q=3)
df$Hexachloroethane_cat<- quantcut(df$Hexachloroethane,q=3)
df$X1.2.Dichlorobenzene_cat<- quantcut(df$X1.2.Dichlorobenzene,q=3)
df$Hexachlorobutadiene_cat<- quantcut(df$Hexachlorobutadiene,q=3)
df$Dibenzofuran_cat<- quantcut(df$Dibenzofuran,q=3)
df$X1.4.Dichlorobenzene_cat<- quantcut(df$X1.4.Dichlorobenzene,q=3)
df$Hexachlorobenzene_cat<- quantcut(df$Hexachlorobenzene,q=3)
df$Chrysene_cat<- quantcut(df$Chrysene,q=3)
df$Piperonyl.Butoxide_cat<- quantcut(df$Piperonyl.Butoxide,q=3)
df$Butylbenzyl.phthalate_cat<- quantcut(df$Butylbenzyl.phthalate,q=3)
df$X4.4..DDE_cat<- quantcut(df$X4.4..DDE,q=3)
df$Pyrene_cat<- quantcut(df$Pyrene,q=3)
df$N.Nitrosodiphenylamine_cat<- quantcut(df$N.Nitrosodiphenylamine,q=3)
df$Bis.2.chloro.1.methylethyl..ether_cat<- quantcut(df$Bis.2.chloro.1.methylethyl..ether,q=3)
df$Myristicin_cat<- quantcut(df$Myristicin,q=3)
df$Fluorene_cat<- quantcut(df$Fluorene,q=3)
df$X1.2.4.Trichlorobenzene_cat<- quantcut(df$X1.2.4.Trichlorobenzene,q=3)
df$Triphenyl.Phosphate_cat<- quantcut(df$Triphenyl.Phosphate,q=3)
df$X2.Methylnaphthalene_cat_cat<- quantcut(df$X2.Methylnaphthalene,q=3)
df$pm25_cat<- quantcut(df$pm25,q=3)

names(df) #confirm that the PAH variables in the columns specified below
covs<- names(df[,39:71])
# covs<- names(df[,c(45,47,55,59,63,66)]) #get names of PAHs and assign to "covs" object
df$y.fake<- rnorm(length(df$Compounds)) #generate a "fake" variable because we are not modeling a response variable

#initiate the cluster analysis with Bayesian Profile Regression using the PReMiuM package in R
profiles_PAH<- profRegr(covNames = covs,xModel="Discrete",
                        outcome="y.fake",
                        yModel="Normal",
                        excludeY = T,
                        output="allChemsPM_profiles_03142025",
                        nSweeps=25000, nBurn=5000,
                        nClusInit = 20,
                        data=df)

mat_PAH<- calcDissimilarityMatrix(profiles_PAH) #calculate dissimilarity matrix
clus_PAH<- calcOptimalClustering(mat_PAH) #estimate optimal clustering
df$clusters<- clus_PAH$clustering #attach clusters to the dataset
risks_PAH<-calcAvgRiskAndProfile(clus_PAH) #calculate risk profiles
save(risks_PAH,file="allChemisRiskProfiles_03142025.rdata") #save the risk profile object
# clusterOrderObj <- plotRiskProfile(risks_PAH, "clusters_03062025.png") #now plot the risk profiles

#Generate new sample ID variable for post-processing of clusters
df$SampleID<- factor(df$Compounds,
                     levels=c("KEL1",
                              # "KEL2", blank sample
                              # "KEL3", sample non-existant
                              "KEL4",
                              "KEL5",
                              "KEL6",
                              "KEL7",
                              "KEL8",
                              "KEL9",
                              "KEL10",
                              "KEL11",
                              "KEL12",
                              "KEL13",
                              "KAM1",
                              # "KAM2", blank sample
                              "KAM3",
                              "KAM4",
                              "KAM5",
                              "KAM6",
                              "KAM7",
                              "KAM8",
                              "KAM9",
                              "KAM10",
                              "KAM11",
                              "KAM12",
                              "KAM13"
                              # "KAM14" blank sample
                     ))


#plot a quasi-time series of the clusters
ggplot(df,aes(x=SampleID,y=clusters)) +
  geom_point() 

library(stringr)
library(lubridate)

df <- df %>%
  mutate(startDate = mdy(startDate),
         endDate = mdy(endDate),
         city = case_when(
           startsWith(as.character(SampleID), "KEL") ~ "Kelowna",
           startsWith(as.character(SampleID), "KAM") ~ "Kamloops",
           TRUE ~ "Unknown"  # In case there are unexpected SampleIDs
         ))

# Extract month and determine SampleID ranges per month

# Plot
ggplot(df, aes(x = SampleID)) +
  geom_point(aes(y = clusters, color = as.factor(clusters)), size = 3) +  # Color points by clusters
  geom_line(aes(y = pm25, color = "PM2.5", group = 1), linewidth = 1) +  # Line for PM2.5
  scale_color_manual(values = c("1" = "blue", "2" = "green", "3" = "orange", "4" = "red")) +  # Custom colors for clusters
  scale_y_continuous(name = "PM2.5 (Âµg/m^3) & Cluster") + 
  labs(x = "Sample ID", color = "Legend") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Angle x-axis labels

#Krystal wants it - kamloops and kelowna stacked
#bars of color instead of dots
#shade in the pm2.5 underneath
#maybe have month above

#subset the data for data summaries
df.sub <- df[,c(3:34,36,73)]

df.sub <- df.sub %>%
  rename("Hexahydro_benzopyran"="X1.3.4.6.7.8.Hexahydro.4.6.6.7.8.8.hexamethylcyclopenta.g..2.benzopyran")
# df.sub <- df[,c(13,15,23,27,31,34,45,47,55,59,63,66,68)]
df.sub %>% 
  tbl_summary(by=clusters) %>%
  add_overall() %>%
  add_p()

# df.sub <- df[,c(3:6,8,11:16,20,22,23,27,31,33,34,68)]
# df.sub <- df[,c(3:34,68)]

write.csv(df.sub,file="df.sub.csv")

chemical_definitions_reformatted <- read.csv("chemical_definitions_reformatted.csv")

# df.sub_reformated <- read.csv("df.sub_reformated.csv", sep="")

# significant_chemicals<- left_join(df.sub_reformated,
# chemical_definitions_reformatted,
# by=c("chemical"="Name"))

# write.csv(significant_chemicals,file="significantChems_03062025.csv")

#generate correlation plots
df.cor<- df.sub[,-34] #subset to the PAHs of interest

df.cor <- df.cor %>%
  rename_with(~ substr(., 1, 15))
cors<- cor(df.cor)

corrplot(cors, method="shade",
         addrect=4,
         order="hclust", tl.cex=0.4)

# ggsave(correlations,file="correlations.png")
hc <- hclust(as.dist(1 - cors), method = "complete")  # Use your correlation matrix


dendogram<- plot(hc, labels = colnames(cors), main = "Dendrogram of Variables")
ggsave(dendogram,file="dendogram.png")

#reshape the data for data visualizations
library(reshape2)
df.sub.melted<- melt(df.sub,id="clusters")

df.sub.melted %>%
  ggplot(aes(x=factor(clusters),y=value,fill=factor(clusters))) +
  geom_boxplot() +
  # geom_violin(alpha=0.5) +
  facet_wrap(~variable, scales="free_y")+
  theme_minimal()

df.sub.melted %>%
  filter(variable %in% c("Phenanthrene", "Anthracene", "Chrysene",
                         "Pyrene", "Fluorene", "X2.Methylnaphthalene", 
                         "Dibenzofuran", "pm25")) %>%
  ggplot(aes(x=factor(clusters),y=value,fill=factor(clusters))) +
  geom_boxplot() +
  # geom_violin(alpha=0.5) +
  facet_wrap(~variable, scales="free_y",ncol=4)+
  theme_minimal()

df.sub.melted <- df.sub.melted %>%
  group_by(clusters, variable) %>%
  mutate(Overall_Mean=mean(value,na.rm=T))
df.sub.melted$val.diff<- df.sub.melted$value - df.sub.melted$Overall_Mean

# ggplot(df.sub.melted,aes(x=factor(clusters),y=val.diff,fill=factor(clusters))) +
#   geom_boxplot() +
#   # geom_hline(yintercept=median(df.sub.melted$value,na.rm=T)) +
#   scale_y_log10()+
#   facet_wrap(~variable,scales="free_y")
# 
p.vals<-df.sub.melted %>%
  group_by(clusters, variable) %>%
  summarise(
    mean_value = mean(value, na.rm = TRUE),
    overall_mean = mean(df.sub.melted$value[df.sub.melted$clusters == unique(clusters)], na.rm = TRUE),
    p_value = t.test(value, mu = overall_mean)$p.value
  )

names(df.sub.melted)

df.sub_z<- df.sub 

df.sub_z[,1:33]<- as.numeric(scale(df.sub_z[,1:33]))

df.sub_z.melted<- melt(df.sub_z,id=c("clusters"))


library(ggplot2)

ggplot(df.sub_z.melted, aes(x = factor(clusters), y = variable, fill = value)) +
  geom_tile() +  # Heatmap
  scale_fill_gradient(low = "purple", high = "yellow") +  # Color scale
  labs(x = "Cluster", y = "Compound", fill = "Value", title = "Heatmap of Compounds by Cluster") +
  theme_minimal() +
  theme(axis.text.x = element_text(hjust = 1))  # Rotate x-axis labels for readability

df.sub_z.melted <- df.sub_z.melted %>%
  group_by(variable) %>% 
  mutate(above1= value>1)


df.sub_z.melted$above1<- ifelse(df.sub_z.melted$above1=="TRUE",1,0)
View(df.sub_z.melted)

aggregate(df.sub_z.melted$above1,list(df.sub_z.melted$clusters),mean)
#  Group.1          x
#1       1 0.05627706
#2       2 0.18181818
#3       3 0.01010101
#4       4 0.29870130

library(ggplot2)

ggplot(df.sub_z.melted, aes(x = factor(clusters), y = variable, fill = value)) +
  geom_tile() +  # Heatmap
  scale_fill_gradient(low = "purple", high = "yellow") +  # Color scale
  labs(x = "Cluster", y = "Compound", fill = "Value", title = "Heatmap of Compounds by Cluster") +
  theme_minimal() +
  theme(axis.text.x = element_text(hjust = 1))  # Rotates x-axis labels for readability

# Compute Mean and Standard Error (SE) for Each Compound by Cluster
df.summary <- df.sub %>%
  select(clusters, Phenanthrene, Anthracene, Chrysene,
         Pyrene, Fluorene, X2.Methylnaphthalene, Dibenzofuran) %>%
  group_by(clusters) %>%
  summarize(
    Phenanthrene_mean = mean(Phenanthrene, na.rm = TRUE),
    Phenanthrene_se = sd(Phenanthrene, na.rm = TRUE) / sqrt(n()),
    
    Anthracene_mean = mean(Anthracene, na.rm = TRUE),
    Anthracene_se = sd(Anthracene, na.rm = TRUE) / sqrt(n()),
    
    Chrysene_mean = mean(Chrysene, na.rm = TRUE),
    Chrysene_se = sd(Chrysene, na.rm = TRUE) / sqrt(n()),
    
    Pyrene_mean = mean(Pyrene, na.rm = TRUE),
    Pyrene_se = sd(Pyrene, na.rm = TRUE) / sqrt(n()),
    
    Fluorene_mean = mean(Fluorene, na.rm = TRUE),
    Fluorene_se = sd(Fluorene, na.rm = TRUE) / sqrt(n()),
    
    Methylnaphthalene_mean = mean(X2.Methylnaphthalene, na.rm = TRUE),
    Methylnaphthalene_se = sd(X2.Methylnaphthalene, na.rm = TRUE) / sqrt(n()),
    
    Dibenzofuran_mean = mean(Dibenzofuran, na.rm = TRUE),
    Dibenzofuran_se = sd(Dibenzofuran, na.rm = TRUE) / sqrt(n())
  ) %>%
  pivot_longer(cols = -clusters, names_to = c("Compound", ".value"), names_pattern = "(.*)_(mean|se)")

ggplot(df.summary, aes(x = factor(clusters), y = mean, fill = Compound)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +  # Wider dodge
  geom_errorbar(aes(ymin = mean - se, ymax = mean + se), 
                width = 0.2, position = position_dodge(width = 0.8)) +  # Match dodge width
  labs(x = "Cluster", y = "Mean Value", title = "Mean Concentrations with Standard Error Bars") +
  # scale_y_log10() +  # Keep log scale if needed
  scale_fill_brewer(palette = "Set1") +  # Better color differentiation
  theme_minimal()

df.summary<- df.sub %>%
  select(clusters,Phenanthrene,Anthracene,
         Chrysene,
         Pyrene,
         Fluorene,
         X2.Methylnaphthalene,
         Dibenzofuran) %>%
  group_by(clusters) %>%
  summarize(Phenanthrene=mean(Phenanthrene),
            Anthracene=mean(Anthracene),
            Chrysene=mean(Chrysene),
            Pyrene=mean(Pyrene),
            Fluorene=mean(Fluorene),
            Methylnaphthalene=mean(X2.Methylnaphthalene),
            Dibenzofuran=mean(Dibenzofuran))

df.summary.melted<- melt(df.summary,id="clusters")

df.summary.melted %>%
  ggplot(aes(x=factor(clusters),y=value, fill=factor(clusters)))+
  geom_bar(stat="identity") +
  facet_wrap(~variable, scales="free_y",ncol=4)


ggplot(df,aes(x=SampleID,y=clusters)) +
  geom_point()  +
  ylab("Cluster Assignment")


#ALINE MAKING THE GRAPHS PRETTIER:
#1. Cluster Assignment Graph
#Original code:
#ggplot(df,aes(x=SampleID,y=clusters)) +
#  geom_point()  +
#  ylab("Cluster Assignment")
# Extract numeric part of SampleID for sorting
df <- df %>%
  mutate(site = ifelse(str_detect(SampleID, "^KAM"), "Kamloops", "Kelowna"),
         SampleNum = as.numeric(str_extract(SampleID, "\\d+"))) %>%
  arrange(site, SampleNum) %>%
  mutate(SampleID = factor(SampleID, levels = unique(SampleID)))  # enforce order in plot

# Plot with clean theme
ggplot(df, aes(x = SampleID, y = clusters)) +
  geom_point(size = 3) +
  facet_wrap(~site, ncol = 1, scales = "free_x") +  # stack Kamloops above Kelowna
  ylab("Cluster Assignment") +
  xlab("Sample ID") +
  scale_y_continuous(breaks = 1:4) +
  theme_classic() +  # removes grey background
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    strip.text = element_text(size = 12, face = "bold"),
    axis.title = element_text(size = 12),
    plot.title = element_text(hjust = 0.5)
  )

#- try again
library(ggplot2)
library(dplyr)
library(stringr)

# Add city and numeric SampleNum, excluding KAM2 and KEL2
df_plot <- df %>%
  filter(!SampleID %in% c("KAM2", "KEL2")) %>%
  mutate(
    city = ifelse(str_detect(SampleID, "^KAM"), "Kamloops", "Kelowna"),
    SampleNum = as.numeric(str_extract(SampleID, "\\d+"))
  )

# Only include expected sampler numbers (excluding 2)
all_ids <- expand.grid(
  SampleNum = setdiff(1:13, 2),
  city = c("Kamloops", "Kelowna")
)

# Join to ensure full layout with any missing values
df_full <- left_join(all_ids, df_plot, by = c("city", "SampleNum"))

# Sort city factor so Kamloops is on top
df_full$city <- factor(df_full$city, levels = c("Kamloops", "Kelowna"))

# Plot without cluster number labels
ggplot(df_full, aes(x = SampleNum, y = city)) +
  geom_point(aes(color = as.factor(clusters)), size = 5, na.rm = TRUE) +
  scale_color_brewer(palette = "Dark2", na.translate = FALSE) +
  scale_x_continuous(breaks = setdiff(1:13, 2)) +
  labs(
    x = "Sampler Number",
    y = NULL,
    color = "Cluster"
  ) +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 12, face = "bold"),
    axis.text.x = element_text(size = 10),
    axis.title.x = element_text(size = 12),
    legend.position = "bottom"
  )


#another visual - cities not stacked
# Create city and SampleNum fields
df_plot <- df %>%
  filter(!SampleID %in% c("KAM2", "KEL2")) %>%  # remove blank/control samples
  mutate(
    city = ifelse(str_detect(SampleID, "^KAM"), "Kamloops", "Kelowna"),
    SampleNum = as.numeric(str_extract(SampleID, "\\d+"))
  )

# Create full grid of all expected SampleIDs EXCLUDING 2
all_ids <- expand.grid(
  SampleNum = setdiff(1:13, 2),  # remove sample 2
  city = c("Kamloops", "Kelowna")
) %>%
  mutate(SampleID = paste0(ifelse(city == "Kamloops", "KAM", "KEL"), SampleNum))

# Join to preserve order and include NAs where missing
df_full <- left_join(all_ids, df_plot, by = c("SampleID", "city", "SampleNum"))

# Factor SampleID so KAM1âKAM13 (w/o 2), then KEL1âKEL13 (w/o 2)
df_full <- df_full %>%
  mutate(SampleID = factor(SampleID, levels = unique(SampleID[order(city, SampleNum)])))

# Plot
ggplot(df_full, aes(x = SampleID, y = clusters)) +
  geom_point(size = 3, na.rm = TRUE) +
  geom_hline(yintercept = seq(1, 4, by = 1), color = "grey90", linetype = "dotted") +
  scale_y_continuous(breaks = 1:4, limits = c(0.5, 4.5)) +
  labs(x = "Sampler ID", y = "Cluster Assignment") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    axis.text.y = element_text(size = 10),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12)
  )

##-----------------------2: REDO
# Plot - ERIC's
#ggplot(df, aes(x = SampleID)) +
#  geom_point(aes(y = clusters, color = as.factor(clusters)), size = 3) +  # Color points by clusters
#  geom_line(aes(y = pm25, color = "PM2.5", group = 1), linewidth = 1) +  # Line for PM2.5
#  scale_color_manual(values = c("1" = "blue", "2" = "green", "3" = "orange", "4" = "red")) +  # Custom colors for clusters
#  scale_y_continuous(name = "PM2.5 (Âµg/m^3) & Cluster") + 
#  labs(x = "Sample ID", color = "Legend") +
#  theme_minimal() +
 # theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Angle x-axis labels

#Krystal wants it - kamloops and kelowna stacked
#bars of color instead of dots
#shade in the pm2.5 underneath
#maybe have month above

#BOTH Kamloops and Kelowna
library(ggplot2)
library(dplyr)
library(stringr)
library(lubridate)

# Prepare data
library(ggplot2)
library(dplyr)
library(stringr)
library(lubridate)

# Clean and format data
df_plot <- df %>%
  filter(!SampleID %in% c("KAM2", "KEL2")) %>%
  mutate(
    SampleNum = as.numeric(str_extract(as.character(SampleID), "\\d+")),
    SampleID = factor(SampleID, levels = unique(SampleID[order(SampleID)])),
    Month = toupper(month(startDate, label = TRUE, abbr = TRUE))
  )

# Create plot
ggplot(df_plot, aes(x = SampleID)) +
  # Background tiles for clusters
  geom_tile(aes(y = 0, fill = as.factor(clusters)), height = Inf, width = 0.9, alpha = 0.25, show.legend = TRUE) +
  
  # PM2.5 line and area
  geom_area(aes(y = pm25, group = 1), fill = "grey30", alpha = 0.5, na.rm = TRUE) +
  geom_line(aes(y = pm25, group = 1), color = "black", size = 1, na.rm = TRUE) +
  
  # Colorblind-friendly cluster palette
  scale_fill_manual(
    values = c("1" = "#1B9E77", "2" = "#D95F02", "3" = "#7570B3", "4" = "#E7298A"),
    name = "Cluster"
  ) +
  
  # Add dual x-axis: bottom = SampleID, top = Month
  scale_x_discrete(
    name = "Sampler ID",
    labels = levels(df_plot$SampleID),
    guide = guide_axis(check.overlap = TRUE)
  ) +
  scale_y_continuous(name = "PM2.5 (Âµg/mÂ³)") +
  
  # Add a second axis with months (tick format)
  annotation_custom(
    grob = grid::textGrob(df_plot$Month, x = unit(1:length(df_plot$SampleID) / length(df_plot$SampleID), "npc"),
                          y = unit(1, "npc"), just = "bottom", gp = grid::gpar(fontsize = 9)),
    ymin = Inf, ymax = Inf
  ) +
  
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    axis.text.y = element_text(size = 10),
    axis.title = element_text(size = 12),
    panel.grid = element_blank(),
    legend.position = "bottom",
    legend.title = element_text(size = 10),
    axis.line.x.top = element_line(),
    axis.ticks.x.top = element_line(),
    axis.text.x.top = element_text(size = 9, face = "bold")
  )

#Kamloops
# Filter Kamloops samples
df_kam <- df %>%
  filter(str_detect(SampleID, "^KAM") & !SampleID %in% c("KAM2")) %>%
  mutate(
    SampleNum = as.numeric(str_extract(as.character(SampleID), "\\d+")),
    SampleID = factor(SampleID, levels = unique(SampleID[order(SampleID)]))
  )

# Plot for Kamloops
ggplot(df_kam, aes(x = SampleID)) +
  geom_tile(aes(y = 0, fill = as.factor(clusters)), height = Inf, width = 0.9, alpha = 0.25) +
  geom_area(aes(y = pm25, group = 1), fill = "grey30", alpha = 0.5, na.rm = TRUE) +
  geom_line(aes(y = pm25, group = 1), color = "black", linewidth = 1, na.rm = TRUE) +
  scale_fill_manual(
    values = c("1" = "#1B9E77", "2" = "#D95F02", "3" = "#7570B3", "4" = "#E7298A"),
    name = "Cluster"
  ) +
  scale_y_continuous(name = "PM2.5 (Âµg/mÂ³)") +
  labs(x = "Sampler ID", title = "Kamloops") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    axis.title = element_text(size = 12),
    panel.grid = element_blank(),
    legend.position = "bottom",
    legend.title = element_text(size = 10)
  )


#KELOWNA
# Filter Kelowna samples
df_kel <- df %>%
  filter(str_detect(SampleID, "^KEL") & !SampleID %in% c("KEL2")) %>%
  mutate(
    SampleNum = as.numeric(str_extract(as.character(SampleID), "\\d+")),
    SampleID = factor(SampleID, levels = unique(SampleID[order(SampleID)]))
  )

# Plot for Kelowna
ggplot(df_kel, aes(x = SampleID)) +
  geom_tile(aes(y = 0, fill = as.factor(clusters)), height = Inf, width = 0.9, alpha = 0.25) +
  geom_area(aes(y = pm25, group = 1), fill = "grey30", alpha = 0.5, na.rm = TRUE) +
  geom_line(aes(y = pm25, group = 1), color = "black", linewidth = 1, na.rm = TRUE) +
  scale_fill_manual(
    values = c("1" = "#1B9E77", "2" = "#D95F02", "3" = "#7570B3", "4" = "#E7298A"),
    name = "Cluster"
  ) +
  scale_y_continuous(name = "PM2.5 (Âµg/mÂ³)") +
  labs(x = "Sampler ID", title = "Kelowna") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
    axis.title = element_text(size = 12),
    panel.grid = element_blank(),
    legend.position = "bottom",
    legend.title = element_text(size = 10)
  )

#REDO the figure with the numerous graphs
library(ggplot2)
library(dplyr)

# Define colorblind-friendly palette
cb_palette <- c("1" = "#1B9E77",  # green
                "2" = "#D95F02",  # orange
                "3" = "#7570B3",  # purple
                "4" = "#E7298A")  # pink

# Plot
ggplot(df.sub.melted, aes(x = factor(clusters), y = value, fill = factor(clusters))) +
  geom_boxplot(outlier.size = 1, outlier.shape = 16) +
  facet_wrap(~variable, scales = "free_y", ncol = 6) +
  scale_fill_manual(values = cb_palette, name = "Cluster") +
  theme_minimal() +
  labs(x = "Cluster", y = "Value") +
  theme(
    strip.text = element_text(size = 10, face = "bold"),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 8),
    legend.position = "right",
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 9),
    panel.grid.major = element_line(color = "grey90"),
    panel.grid.minor = element_blank()
  )
